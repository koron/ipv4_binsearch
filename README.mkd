# IPv4範囲の二分探査モジュール

重複のない複数のIPv4アドレスの範囲(startとendのアドレスで示される)から、
指定されたIPv4アドレスが含まれるモノを検索するモジュールです。

## ビルド方法

    $ gradle build

出力: `build/libs/ipv4_binsearch-X.X.jar`

pom.xml is obsoleted.

## サンプルコード

### IPv4からの構築

```java
import net.kaoriya.qb.ipv4_binsearch.IPv4Table;

public class Sample {
  public static void Main(String[] args) {
    // 検索用のテーブルを構築する
    IPv4Table<String> t = new IPv4Table();
    t.add(IPv4.fromString("192.168.0.8"),
        IPv4.fromString("192.168.0.15"), "foo");
    t.add(IPv4.fromString("192.168.1.100"),
        IPv4.fromString("192.168.3.200"), "bar");
    t.add(IPv4.fromString("10.0.0.0"),
        IPv4.fromString("10.1.0.0"), "baz");

    // 検索する
    t.find(IPv4.fromString("192.168.0.12")); // "foo" が返る
    t.find(IPv4.fromString("192.168.2.0"));  // "bar" が返る
    t.find(IPv4.fromString("10.0.23.254"));  // "baz" が返る

    t.find(IPv4.fromString("0.0.0.0"));       // null が返る
    t.find(IPv4.fromString("9.255.255.255")); // null が返る
    t.find(IPv4.fromString("10.1.0.1"));      // null が返る
    t.find(IPv4.fromString("127.0.0.1"));     // null が返る
  }
}
```

### CIDR/サブネット形式からの構築

```java
import net.kaoriya.qb.ipv4_binsearch.CIDR;

// ...中略...

IPv4Table<String> t = new IPv4Table();
// CIDR形式
t.add(CIDR.fromString("192.168.0.8/24"), "foo");
// サブネット形式
t.add(CIDR.fromString("192.168.1.0/255.255.255.0"), "foo");
```
