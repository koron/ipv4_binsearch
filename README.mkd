# IPv4範囲の二分探査モジュール

重複のない複数のIPv4アドレスの範囲(startとendのアドレスで示される)から、
指定されたIPv4アドレスが含まれるモノを検索するモジュールです。

## ビルド方法

    $ gradle build

出力: `build/libs/ipv4_binsearch-X.X.jar`

pom.xml is obsoleted.

## サンプルコード

### IPv4からの構築

```java
import net.kaoriya.qb.ipv4_binsearch.IPv4Table;

public class Sample {
  public static void Main(String[] args) {
    // 検索用のテーブルを構築する
    IPv4Table<String> t = new IPv4Table();
    t.add(IPv4.fromString("192.168.0.8"),
        IPv4.fromString("192.168.0.15"), "foo");
    t.add(IPv4.fromString("192.168.1.100"),
        IPv4.fromString("192.168.3.200"), "bar");
    t.add(IPv4.fromString("10.0.0.0"),
        IPv4.fromString("10.1.0.0"), "baz");

    // 検索する
    t.find(IPv4.fromString("192.168.0.12")); // "foo" が返る
    t.find(IPv4.fromString("192.168.2.0"));  // "bar" が返る
    t.find(IPv4.fromString("10.0.23.254"));  // "baz" が返る

    t.find(IPv4.fromString("0.0.0.0"));       // null が返る
    t.find(IPv4.fromString("9.255.255.255")); // null が返る
    t.find(IPv4.fromString("10.1.0.1"));      // null が返る
    t.find(IPv4.fromString("127.0.0.1"));     // null が返る
  }
}
```

### CIDR/サブネット形式からの構築

```java
import net.kaoriya.qb.ipv4_binsearch.CIDR;

// ...中略...

IPv4Table<String> t = new IPv4Table();
// CIDR形式
t.add(CIDR.fromString("192.168.0.8/24"), "foo");
// サブネット形式
t.add(CIDR.fromString("192.168.1.0/255.255.255.0"), "foo");
```

## ベンチマーク

ベンチマークを実行するには、以下のようにします。

    $ gradle benchmark

以下の様な結果を得られます。

```
:benchmark1
Benchmark1 executing:

benchmark query IPv4Table in 10 sec: 1721401.60/sec (total 17214016)
benchmark query IPv4Table2 in 10 sec: 1235430.80/sec (total 12354308)

Benchmark#1 ratio: 71.77%
:benchmark2
Benchmark2 executing:

[    0.018851s] GC: init
[    5.844288s] GC: under holding many object
[    0.091530s] GC: under holding few object

Benchmark#2 ratio: 1.59%
```

benchmark1 は IPv4Table と IPv4Table2 に対するクエリ回数(速度)を比較するもの
で、10秒間で何回クエリできたかを示しています。

    Benchmark#1 ratio: 71.77%

特に上記は、IPv4Table2 におけるクエリ回数は IPv4Table の約 72% であることを示し
ています。

benchmark2 は IPv4Table と IPv4Table2 を使用した際の GC にかかる時間を比較する
ものです。

    Benchmark#2 ratio: 1.59%

特に上記は、IPv4Table2 を使っている(メモリ上に保持している)場合に GC にかかる時
間が、IPv4Table を使っている場合に発生する GC にかかる時間の約 1.6% である
(=高速である)ことを示しています。

### ベンチマーク結論

IPv4Table2 を使うことで、IPv4Tableを使う場合に比べてクエリ速度はやや遅くなるも
のの、GCにかかる時間は飛躍的に短くなることがわかります。

## ベンチマーク#3

```
$ gradle benchmark3

Benchmark3 executing:

Many objects
[    0.639730s] GC: init
[    9.137303s] Generate table
[    5.605132s] GC: after generating
Total: 14.74

Few objects
[    0.009025s] GC: init
[   12.208847s] Generate table
[    0.076361s] GC: after generating
Total: 12.29
```
